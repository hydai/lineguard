name: CI

on:
  push:
    branches: [ master ]
    paths:
      - 'src/**'
      - 'Cargo.*'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ master ]
    paths:
      - 'src/**'
      - 'Cargo.*'
      - '.github/workflows/ci.yml'
  workflow_dispatch:

# Cancel old runs when pushing new commits to a PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    # Skip duplicate runs when PR is merged
    if: github.event_name != 'push' || !contains(github.event.head_commit.message, 'Merge pull request')
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-${{ matrix.rust }}-
          ${{ runner.os }}-cargo-build-

    - name: Build
      run: cargo build --verbose

    - name: Run tests
      run: cargo test --verbose

    - name: Run doctests
      run: cargo test --doc --verbose

  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    # Skip duplicate runs when PR is merged
    if: github.event_name != 'push' || !contains(github.event.head_commit.message, 'Merge pull request')

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build documentation
      run: cargo doc --no-deps --document-private-items
      env:
        RUSTDOCFLAGS: -D warnings

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    # Skip duplicate runs when PR is merged
    if: github.event_name != 'push' || !contains(github.event.head_commit.message, 'Merge pull request')

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Cache cargo-audit
      id: cache-cargo-audit
      uses: actions/cache@v4
      with:
        path: ~/.cargo/bin/cargo-audit
        key: cargo-audit-${{ runner.os }}-v1

    - name: Install cargo-audit
      if: steps.cache-cargo-audit.outputs.cache-hit != 'true'
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    # Only run on master push, not on PRs
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo-tarpaulin
      id: cache-cargo-tarpaulin
      uses: actions/cache@v4
      with:
        path: ~/.cargo/bin/cargo-tarpaulin
        key: cargo-tarpaulin-${{ runner.os }}-v1

    - name: Install tarpaulin
      if: steps.cache-cargo-tarpaulin.outputs.cache-hit != 'true'
      run: cargo install cargo-tarpaulin

    - name: Generate coverage
      run: cargo tarpaulin --out xml --avoid-cfg-tarpaulin

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        files: ./cobertura.xml
        fail_ci_if_error: false
