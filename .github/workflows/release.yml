name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      upload_url: ${{ steps.release.outputs.upload_url }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="v${{ github.event.inputs.version }}"
        else
          VERSION="${{ github.ref_name }}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from commits since last tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -z "$PREV_TAG" ]; then
          COMMITS=$(git log --pretty=format:"- %s" HEAD)
        else
          COMMITS=$(git log --pretty=format:"- %s" ${PREV_TAG}..HEAD)
        fi

        # Create changelog content
        cat << EOF > CHANGELOG.md
        ## What's Changed

        ${COMMITS}

        **Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREV_TAG}...${{ steps.version.outputs.version }}
        EOF

    - name: Create GitHub Release
      id: release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: LineGuard ${{ steps.version.outputs.version }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false

  build-binaries:
    name: Build - ${{ matrix.target }}
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            use-cross: false
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            use-cross: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            use-cross: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            use-cross: true

          # macOS
          - os: macos-latest
            target: x86_64-apple-darwin
            use-cross: false
          - os: macos-latest
            target: aarch64-apple-darwin
            use-cross: false

          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            use-cross: false

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross
      if: matrix.use-cross
      run: cargo install cross --git https://github.com/cross-rs/cross

    - name: Build binary
      run: |
        if [ "${{ matrix.use-cross }}" = "true" ]; then
          cross build --release --target ${{ matrix.target }}
        else
          cargo build --release --target ${{ matrix.target }}
        fi
      shell: bash

    - name: Strip binary (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        if [ "${{ matrix.os }}" = "macos-latest" ]; then
          strip target/${{ matrix.target }}/release/lineguard
        else
          if [ "${{ matrix.use-cross }}" != "true" ]; then
            strip target/${{ matrix.target }}/release/lineguard
          fi
        fi

    - name: Create archive
      id: archive
      run: |
        VERSION=${{ needs.create-release.outputs.version }}
        ARCHIVE_NAME="lineguard-${VERSION}-${{ matrix.target }}"

        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          # Windows - create zip
          cd target/${{ matrix.target }}/release
          7z a ../../../${ARCHIVE_NAME}.zip lineguard.exe
          cd ../../..
          echo "file=${ARCHIVE_NAME}.zip" >> $GITHUB_OUTPUT
        else
          # Unix - create tar.gz
          cd target/${{ matrix.target }}/release
          tar czf ../../../${ARCHIVE_NAME}.tar.gz lineguard
          cd ../../..
          echo "file=${ARCHIVE_NAME}.tar.gz" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: Generate checksum
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          certutil -hashfile ${{ steps.archive.outputs.file }} SHA256 > ${{ steps.archive.outputs.file }}.sha256
        else
          shasum -a 256 ${{ steps.archive.outputs.file }} > ${{ steps.archive.outputs.file }}.sha256
        fi
      shell: bash

    - name: Upload release asset
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.create-release.outputs.version }}
        files: |
          ${{ steps.archive.outputs.file }}
          ${{ steps.archive.outputs.file }}.sha256

  publish-crate:
    name: Publish to crates.io
    needs: [create-release, build-binaries]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Update version in Cargo.toml
      run: |
        VERSION=${{ needs.create-release.outputs.version }}
        VERSION=${VERSION#v}  # Remove 'v' prefix
        sed -i "s/^version = .*/version = \"$VERSION\"/" Cargo.toml

    - name: Verify package
      run: cargo package --no-verify

    - name: Publish to crates.io
      run: cargo publish --no-verify
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
